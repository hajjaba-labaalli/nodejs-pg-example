name: CI/CD Workflow  # Nom du workflow CI/CD

on:  # Définition des événements qui déclenchent l'exécution du workflow CI/CD
  push:  # Déclenchement lors d'un push
    branches:
      - main  # Le workflow s'exécute uniquement pour les pushs sur la branche main
  pull_request:  # Déclenchement lors de la création ou mise à jour d'une pull request
    branches:
      - main  # Le workflow s'exécute uniquement pour les pull requests vers la branche main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG_NAME: 0.1
  
jobs:  # Définition des différents jobs du workflow

  # Job de test
  test:
    runs-on: ubuntu-latest # Utilisation d'un runner personnalisé pour ce job. Ce runner est une machine virtuelle (VM) configurée avec Debian 12.
          
    steps:  # Liste des étapes à exécuter dans ce job
      - name: Checkout code  # Étape pour la récupération du code source du dépôt
        uses: actions/checkout@v3  # Action réutilisable pour checker le code du dépôt GitHub

      - name: Set up Node.js  # Étape pour la configuration de Node.js
        uses: actions/setup-node@v3  # Action réutilisable pour configurer Node.js
        with:
          node-version: '20'  # Spécification de la version de Node.js à utiliser

      - name: Install dependencies  # Étape pour l'installation des dépendances du projet
        run: npm install  # Exécution de la commande npm pour installer les dépendances

      - name: Run tests  # Étape pour exécuter les tests
        run: npm test  # Lancement des tests unitaires définis dans le projet
      
      # - name: Run SAST check
      #   uses: IvanKuchin/SAST@v1
      #   with:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   env:
      #     LOG_VERBOSE: true

      # - name: Set up JDK 17  # Étape pour la configuration de JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '17'
      #     distribution: 'temurin'

      # - name: Analyze with SonarCloud  # Étape pour l'analyse avec SonarCloud
      #   run: |
      #     npx sonar-scanner \
      #       -Dsonar.projectKey=hajjaba-labaalli_nodejs-pg-example \
      #       -Dsonar.organization=hajjaba-labaalli \
      #       -Dsonar.host.url=https://sonarcloud.io \
      #       -Dsonar.login=$SONARCLOUD_TOKEN
      #   env:
      #     SONARCLOUD_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
      # Analyse des vulnérabilités dans les dépendances
      # - name: Check for vulnerabilities in dependencies
      #   run: npm audit --audit-level=high

      # SonarCloud Scan (SAST)
      # - name: SonarCloud Scan
      #   uses: sonarsource/sonarcloud-github-action@v1.5
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.projectKey=nodejs-pg-example
      #       -Dsonar.organization=hajjaba-labaalli
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job de construction
  build:
    runs-on: ubuntu-latest # Utilisation d'un runner personnalisé pour ce job. Ce runner est une machine virtuelle (VM) configurée avec Debian 12.

    needs: test  # Ce job est dépendant du job de test, il ne s'exécute que si le job de test réussit

    permissions:  # Définit les permissions accordées au GITHUB_TOKEN pour les actions dans ce job.
      contents: read
      packages: write
      attestations: write
      id-token: write
      
    steps:  # Liste des étapes à exécuter dans ce job
      - name: Checkout code  # Étape pour la récupération du code source du dépôt
        uses: actions/checkout@v3
        
      - name: Log in to GitHub Container Registry  # Connexion au registre de conteneurs GitHub
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
      - name: Build Docker image  # Construction de l'image Docker
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} .
          
      - name: Push Docker image  # Pousser l'image Docker vers GitHub Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}  
      
      # Scan Docker image for vulnerabilities with Trivy
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
          
  # Job de déploiement
  deploy:
    runs-on: ubuntu-latest # Utilisation d'un runner personnalisé pour ce job. Ce runner est une machine virtuelle (VM) configurée avec Debian 12.
  
    needs: build  # Ce job attend que le job de build soit terminé avec succès
    
    steps:
      - name: Setup SSH Key  # Ce step configure la clé SSH pour la connexion sans mot de passe au serveur distant
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
        shell: bash
  
      - name: Deploy to remote server  # Étape pour déployer sur le serveur distant
        run: |
          ssh -o StrictHostKeyChecking=no "$REMOTE_USER"@"$REMOTE_HOST" <<EOF
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            mkdir -p ~/data
            docker stop backend-app || true
            docker rm backend-app || true
            docker stop postgres || true
            docker rm postgres || true
            docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} || true
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
            docker run -d --name backend-app \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -p 5000:5000 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
            docker run -d --name postgres \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              -v ~/data:/var/lib/postgresql/data \
              -p 5432:5432 \
              postgres:16 \
              bash -c "apt-get update && \
                       apt-get install -y postgresql-16-postgis-3 postgresql-16-postgis-3-scripts && \
                       docker-entrypoint.sh postgres"
          EOF
        shell: bash
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
